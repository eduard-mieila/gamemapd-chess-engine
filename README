================================== GAMEMAPD ===================================

    INSTRUCTIUNI DE COMPILARE

        make build

        Pentru executare:

        xboard -fcp "make run"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  STRUCTURA PROIECTULUI

    Engine-ul comunica cu xboard-ul prin intermediul stdin/stdout. In aceasta
    etapa botul va avea grija sa mute doar pionii de pe urmatoarele pozitii:
    "a2" si "a7".
    Am luat in considerare diferite forme de reprezentare interna a tablei de 
    sah si ne-am oprit la una care s-a dovedit a fi foarte intuitiva si usor de
    lucrat, manipulat si modificat.
    Ne-am hotarat sa reprezentam in logica noastra tabla de sah printr-o matrice
    de unsigned char, si le-am denumit conform pieselor reale de pe o tabla de sah
    asa cum se poate observa in board.h, rezultand matricea U8 chessBoard[8][8].
    Este important de metionat faptul ca pisele de culoare neagră vor avea valori
    impare, in timp ce piesele de culoare alba vor fi intotdeauna reprezentate cu
    valori pare. Acest lucru va fi util pentru a face operatii cat mai eficient
    posibil.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    engine.h

        void cmd_interpreter();

            Asteapta comenzi de la xboard, iar cand le detecteaza apeleaza
            functiile corespunzatoare care executa comenzi si intorc un
            raspuns corespunzator. Daca este cazul, se va printa la stdout
            informatii relevante pentru xboard, apeland print_cmd();

    
        void print_cmd(char *cmd);

            Transmite comenzi xboard-ului.

    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    commands.h

        void feature_cmd();

            Transmite la xboard (cu print_cmd(.)) comanda:
            <    feature sigint=0 san=0 name=GAMEMAPD

        
    void new_cmd(int *engine_color, int *engine_mode);

        Reinitializeaza pozitiile pe tabla de sah;
        Initializeaza partida;

    void force_cmd(int *engine_mode);

        Intra in starea "force mode"

    void forced_move_cmd(char *movement);

        Muta piesa pentru culoarea curenta.
        Schimba randul culorii ce va muta.

    void go_cmd(Board *myBoard, int *engine_mode, int engine_color);

        Intra in starea "go mode".

    void think_cmd(Board *myBoard, int engine_color);

        Analizeaza structurile de date folosind algoritmii. Gaseste o mutare valida
        si buna pentru bot. Sau se preda.

    void white_cmd(int *engine_color);

        Set engine as white ($engine_color).

    void black_cmd(int *engine_color);

        Set engine as black ($engine_color).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    board.h

        getBlackLegalMoves();

            Returneaza, in format string, o mutare valida pentru pionul negru
            de care are grija botul sa-l mute.

    
        getWhiteLegalMoves();

            Returneaza, in format string, o mutare valida pentru pionul alb
            de care are grija botul sa-l mute.


        move(char *movement);

            In functia move se primeste o miscare in format string si se
            realizeaza mutarile specifice in matricea chessBoard.
            Tot in aceasta functie am tratat si cazul in care pionul poate
            ajunge pe prima linia a adversarului, situatie in care se
            transforma in regina.

        getWhiteLegalMoves(); && getBlackLegalMoves();

            Apeleaza functia functia coords_to_string care, 
            primeste niste coordonate, primeste un i si j pentru piesa
            sursa pe care vrem sa o mutam si mai primeste un i si j
            pentru locul destinatie in care vrem sa mutam piesa respectiva
            si, pentru ca noi primim aceste coordonate in oglinda
            fata de cum este asezata tabla in mod normal, cu ajutorul
            case-urilor scrise vom forma un string pe care il vom pasa mai
            departe pentru ca Xboard sa realizeze mutarea corespunzatoare.
            Va analiza mutarile legale pe care piesa noastra, in cazul acesta
            pionul, poate sa le faca si in aceasta etapa va merge tot inainte
            pana acesta se transforma in regina.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    NOTA:
        In etapa a 2-a, 95% din detaliile despre implementare se gasesc
        sub forma comentariilor in cod. Majoritatea modificarilor au
        fost efectuate in fisierele board.cpp/.h, unde s-au adaugat
        miscarile tuturor pieselor, si in fisierele commands.cpp/.h unde
        s-au adunat toate aceste mutari + rocadele.
        Deciziile cu privire la efectuare unei mutari sunt luate in
        functia think_cmd() din commands.cpp.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    SURSE DE INSPIRATIE

        Pentru comunicarea prin intermediul stdin/stdout:
            https://www.gnu.org/software/xboard/
            https://www.gnu.org/software/xboard/engine-intf.html#9

        Reprezentare internă:
        	https://peterellisjones.tumblr.com/post/39938456375/chess-engine-
        	part-i-choosing-internal-data
        	https://github.com/peterellisjones/Checkmate

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    MEMBRII ECHIPEI si CONTRIBUTII

        Alexandru GROZA
            Schelet;
            Interfatarea engine-ului cu xboard-ul prin intermediul stdin/stdout;
            Miscarea pionilor - etapa 1
            Adaptare comunicare/traducere reprezentare interna->comunicare 
                                                                xboard - etapa2

        Ana-Maria MIHNEA
        	Research xboard
        	Research reprezentare internă
        	Implementare reprezentare internă
            Implementare rocade
            README & Comentarii

        Lucian-Dragos PĂUNE
        	Research xboard
        	Research reprezentare internă
        	Implementare reprezentare internă
            Deplasare piese(turn, nebun, regina) - etapa 2
            Implementare rocade
            Implementare en passant

        Eduard-Robert MIEILĂ
        	Research xboard
        	Research reprezentare internă
        	Implementare reprezentare internă
            Deplasare piese(pion, cal, regina, rege) - etapa 2
            Implementare rocade
            Implementare en passant
            
===============================================================================